import React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var styles = {"test":"_3ybTi","scene":"_2SuLm","cube":"_2pK8S","show-front":"_3GN9F","show-right":"_15TEt","show-back":"_HqpHk","show-left":"_3eGbE","show-top":"_XUhix","show-bottom":"_1PxQg","bgImage":"_2p6SK","ctext":"_6UA0m","cube__face":"_1Z85w","cube__face--top":"_24Us9","cube__face--bottom":"_3e5wn","cube__face--front":"_2NVAu","cube__face--right":"_11jFV","cube__face--back":"_3-cL0","cube__face--left":"_3n-O_","cube__text":"_1s_Jc","zoomOut":"_31Z79"};

var cubeStylesGenerator = function cubeStylesGenerator(animationDuration) {
  return {
    scene: {
      width: '100%',
      height: '100%',
      border: '1px solid #CCC',
      perspective: '1000000px',
      transform: 'scale(1)'
    },
    cube: {
      transition: 'all cubic-bezier(0.34, 1.56, 0.64, 1) ' + animationDuration / 1000 + 's ' + animationDuration / 2000 + 's'
    },
    cubeFace: {
      width: '100vw',
      height: '100vh',
      position: 'absolute',
      transition: 'all ' + animationDuration / 1000 + 's ' + animationDuration / 2000 + 's'
    },
    'show-front': {
      transform: 'translateZ(-100vh) rotateY(   0deg);'
    },
    'show-right': {
      transform: 'translateZ(-100vh) rotateY( -90deg);'
    },
    'show-back': {
      transform: 'translateZ(-100vh) rotateY(-180deg);'
    },
    'show-left': {
      transform: 'translateZ(-100vh) rotateY(  90deg);'
    },
    'show-top': {
      transform: 'translateZ(-100vh) rotateX( -90deg);'
    },
    'show-bottom': {
      transform: 'translateZ(-100vh) rotateX(  90deg);'
    },
    'cube__face--front': function cube__faceFront(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateY(  0deg) translateZ(' + disp + 'vh)'
      };
    },
    'cube__face--right': function cube__faceRight(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateY( 90deg) translateZ(' + disp + 'vw)'
      };
    },
    'cube__face--back': function cube__faceBack(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateY(180deg) translateZ(' + disp + 'vh)'
      };
    },
    'cube__face--left': function cube__faceLeft(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateY(-90deg) translateZ(' + disp + 'vw)'
      };
    },
    'cube__face--top': function cube__faceTop(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateX( 90deg) translateZ(' + disp + 'vh)'
      };
    },
    'cube__face--bottom': function cube__faceBottom(disp) {
      if (disp === void 0) {
        disp = 50;
      }

      return {
        transform: 'rotateX(270deg) translateZ(' + disp + 'vh)'
      };
    }
  };
};

var zoomOutAnimation = [{
  transform: 'scale(1)',
  perspective: 1000000
}, {
  transform: 'scale(0.60)',
  perspective: 5000
}, {
  transform: 'scale(0.70)',
  perspective: 5000
}, {
  transform: 'scale(1)',
  perspective: 1000000
}];
var CubeTransition = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(CubeTransition, _React$PureComponent);

  function CubeTransition(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;
    _this.state = {
      currentFace: 'front',
      animationDuration: props.animationSpeed || 1000
    };
    _this.sceneRef = React.createRef();
    _this.cubeAnimation = null;
    _this._renderChildren = _this._renderChildren.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = CubeTransition.prototype;

  _proto.componentDidUpdate = function componentDidUpdate() {
    this.sceneRef.current.animate(zoomOutAnimation, this.state.animationDuration * 1.9);
    this.sceneRef.current.style.animationTimingFunction = 'cubic-bezier(0.68, -0.6, 0.32, 1.6)';
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.face !== this.state.currentFace) {
      this.setState({
        currentFace: nextProps.face
      });
    }

    if (nextProps.animationDuration !== this.state.animationSpeed) {
      this.setState({
        animationDuration: nextProps.animationDuration
      });
    }
  };

  _proto.render = function render() {
    var cubeStyles = cubeStylesGenerator(this.state.animationDuration);
    return /*#__PURE__*/React.createElement("div", {
      ref: this.sceneRef,
      className: [styles.scene, '', this.props.className].join(' ')
    }, /*#__PURE__*/React.createElement("div", {
      style: _extends({}, cubeStyles.cube),
      className: [styles.cube, styles['show-' + this.state.currentFace]].join(' ')
    }, this._renderChildren(), this._renderContent()));
  };

  _proto._renderChildren = function _renderChildren() {
    var _this2 = this;

    var cubeStyles = cubeStylesGenerator(this.state.animationDuration);
    var resizeCube = ['back', 'front', 'top', 'bottom'].includes(this.state.currentFace) ? {
      width: '100vh',
      transform: 'rotateY({{deg}}) translateZ({{translateZ}})',
      transition: 'width ' + this.state.animationDuration / 1000 + 's'
    } : false;
    return ['back', 'front', 'left', 'right', 'top', 'bottom'].map(function (side, index) {
      var deg;
      var translateZ;

      if (side === 'left') {
        deg = '-90deg';
        translateZ = '50vh';
      } else if (side === 'right') {
        deg = '90deg';
        translateZ = 'calc(100vw - 50vh)';
      }

      var sideFaceStyle;

      if (resizeCube && ['left', 'right'].includes(side)) {
        sideFaceStyle = _extends({}, resizeCube);
        sideFaceStyle.transform = resizeCube.transform.replace('{{deg}}', deg).replace('{{translateZ}}', translateZ);
      } else {
        sideFaceStyle = {};
      }

      var finalStyles = _extends({}, cubeStyles.cubeFace, cubeStyles['cube__face--' + side](), _this2.props[side + 'CSS'] || {}, sideFaceStyle);

      return /*#__PURE__*/React.createElement("div", {
        key: index,
        style: finalStyles
      });
    });
  };

  _proto._renderContent = function _renderContent() {
    var _this3 = this;

    var cubeStyles = cubeStylesGenerator(this.state.animationDuration);
    var resizeCube = ['back', 'front', 'top', 'bottom'].includes(this.state.currentFace) ? {
      width: '100vh',
      transform: 'rotateY({{deg}}) translateZ({{translateZ}})',
      transition: 'width ' + this.state.animationDuration / 1000 + 's'
    } : false;
    return ['back', 'front', 'left', 'right', 'top', 'bottom'].map(function (side, index) {
      var deg;
      var translateZ;

      if (side === 'left') {
        deg = '-90deg';
        translateZ = '50vh';
      } else if (side === 'right') {
        deg = '90deg';
        translateZ = 'calc(100vw - 50vh)';
      }

      var sideFaceStyle;

      if (resizeCube && ['left', 'right'].includes(side)) {
        sideFaceStyle = _extends({}, resizeCube);
        sideFaceStyle.transform = resizeCube.transform.replace('{{deg}}', deg).replace('{{translateZ}}', translateZ);
      } else {
        sideFaceStyle = {};
      }

      var contentStyles = _extends({}, cubeStyles.cubeFace, cubeStyles['cube__face--' + side](_this3.props.contentElevation + 50), {
        sideFaceStyle: sideFaceStyle
      });

      return /*#__PURE__*/React.createElement("div", {
        key: index,
        style: contentStyles
      }, _this3.props[side + 'Page']);
    });
  };

  return CubeTransition;
}(React.PureComponent);

export { CubeTransition };
//# sourceMappingURL=index.modern.js.map
